from datetime import datetime

class Convention:
    Act365F: Convention
    Act365FPlus: Convention
    Act360: Convention
    Thirty360: Convention
    ThirtyE360: Convention
    Thirty360ISDA: Convention
    ActActISDA: Convention
    ActActICMA: Convention
    One: Convention
    OnePlus: Convention
    Bus252: Convention

class Modifier:
    P: Modifier
    F: Modifier
    ModP: Modifier
    ModF: Modifier
    Act: Modifier

class RollDay:
    @classmethod
    def EoM(cls) -> RollDay: ...
    @classmethod
    def SoM(cls) -> RollDay: ...
    @classmethod
    def IMM(cls) -> RollDay: ...
    @classmethod
    def Int(cls, val: int) -> RollDay: ...
    @classmethod
    def Unspecified(cls) -> RollDay: ...

class Cal:
    def __init__(self, rules: list[datetime], weekmask: list[int]) -> None: ...
    def add_bus_days(self, date: datetime, days: int, settlement: bool) -> datetime: ...
    def add_days(
        self, date: datetime, days: int, modifier: Modifier, settlement: bool
    ) -> datetime: ...
    def add_months(
        self, date: datetime, months: int, modifier: Modifier, roll: RollDay, settlement: bool
    ) -> datetime: ...
    def bus_date_range(self, start: datetime, end: datetime) -> list[datetime]: ...
    def cal_date_range(self, start: datetime, end: datetime) -> list[datetime]: ...
    def is_bus_day(self, date: datetime) -> bool: ...
    def is_non_bus_day(self, date: datetime) -> bool: ...
    def is_settlement(self, date: datetime) -> bool: ...
    def lag(self, date: datetime, days: int, settlement: bool) -> datetime: ...
    def roll(self, date: datetime, modifier: Modifier, settlement: bool) -> datetime: ...
    def to_json(self) -> str: ...

class UnionCal:
    def __init__(
        self,
        calendars: list[Cal | NamedCal | UnionCal],
        settlement_calendars: list[Cal | NamedCal | UnionCal] | None,
    ) -> None: ...
    def add_bus_days(self, date: datetime, days: int, settlement: bool) -> datetime: ...
    def add_days(
        self, date: datetime, days: int, modifier: Modifier, settlement: bool
    ) -> datetime: ...
    def add_months(
        self, date: datetime, months: int, modifier: Modifier, roll: RollDay, settlement: bool
    ) -> datetime: ...
    def bus_date_range(self, start: datetime, end: datetime) -> list[datetime]: ...
    def cal_date_range(self, start: datetime, end: datetime) -> list[datetime]: ...
    def is_bus_day(self, date: datetime) -> bool: ...
    def is_non_bus_day(self, date: datetime) -> bool: ...
    def is_settlement(self, date: datetime) -> bool: ...
    def lag(self, date: datetime, days: int, settlement: bool) -> datetime: ...
    def roll(self, date: datetime, modifier: Modifier, settlement: bool) -> datetime: ...
    def to_json(self) -> str: ...

class NamedCal:
    def __init__(self, name: str) -> None: ...
    def add_bus_days(self, date: datetime, days: int, settlement: bool) -> datetime: ...
    def add_days(
        self, date: datetime, days: int, modifier: Modifier, settlement: bool
    ) -> datetime: ...
    def add_months(
        self, date: datetime, months: int, modifier: Modifier, roll: RollDay, settlement: bool
    ) -> datetime: ...
    def bus_date_range(self, start: datetime, end: datetime) -> list[datetime]: ...
    def cal_date_range(self, start: datetime, end: datetime) -> list[datetime]: ...
    def is_bus_day(self, date: datetime) -> bool: ...
    def is_non_bus_day(self, date: datetime) -> bool: ...
    def is_settlement(self, date: datetime) -> bool: ...
    def lag(self, date: datetime, days: int, settlement: bool) -> datetime: ...
    def roll(self, date: datetime, modifier: Modifier, settlement: bool) -> datetime: ...
    def to_json(self) -> str: ...
