from datetime import datetime

from rateslib.dual import DualTypes

class ADOrder:
    Zero: ADOrder
    One: ADOrder
    Two: ADOrder

class Convention:
    Act365F: Convention
    Act365FPlus: Convention
    Act360: Convention
    Thirty360: Convention
    ThirtyE360: Convention
    Thirty360ISDA: Convention
    ActActISDA: Convention
    ActActICMA: Convention
    One: Convention
    OnePlus: Convention
    Bus252: Convention

class Modifier:
    P: Modifier
    F: Modifier
    ModP: Modifier
    ModF: Modifier
    Act: Modifier

class RollDay:
    @classmethod
    def EoM(cls) -> RollDay: ...
    @classmethod
    def SoM(cls) -> RollDay: ...
    @classmethod
    def IMM(cls) -> RollDay: ...
    @classmethod
    def Int(cls, val: int) -> RollDay: ...
    @classmethod
    def Unspecified(cls) -> RollDay: ...

class Cal:
    def __init__(self, rules: list[datetime], weekmask: list[int]) -> None: ...
    def add_bus_days(self, date: datetime, days: int, settlement: bool) -> datetime: ...
    def add_days(
        self, date: datetime, days: int, modifier: Modifier, settlement: bool
    ) -> datetime: ...
    def add_months(
        self, date: datetime, months: int, modifier: Modifier, roll: RollDay, settlement: bool
    ) -> datetime: ...
    def bus_date_range(self, start: datetime, end: datetime) -> list[datetime]: ...
    def cal_date_range(self, start: datetime, end: datetime) -> list[datetime]: ...
    def is_bus_day(self, date: datetime) -> bool: ...
    def is_non_bus_day(self, date: datetime) -> bool: ...
    def is_settlement(self, date: datetime) -> bool: ...
    def lag(self, date: datetime, days: int, settlement: bool) -> datetime: ...
    def roll(self, date: datetime, modifier: Modifier, settlement: bool) -> datetime: ...
    def to_json(self) -> str: ...

class UnionCal:
    def __init__(
        self,
        calendars: list[Cal | NamedCal | UnionCal],
        settlement_calendars: list[Cal | NamedCal | UnionCal] | None,
    ) -> None: ...
    def add_bus_days(self, date: datetime, days: int, settlement: bool) -> datetime: ...
    def add_days(
        self, date: datetime, days: int, modifier: Modifier, settlement: bool
    ) -> datetime: ...
    def add_months(
        self, date: datetime, months: int, modifier: Modifier, roll: RollDay, settlement: bool
    ) -> datetime: ...
    def bus_date_range(self, start: datetime, end: datetime) -> list[datetime]: ...
    def cal_date_range(self, start: datetime, end: datetime) -> list[datetime]: ...
    def is_bus_day(self, date: datetime) -> bool: ...
    def is_non_bus_day(self, date: datetime) -> bool: ...
    def is_settlement(self, date: datetime) -> bool: ...
    def lag(self, date: datetime, days: int, settlement: bool) -> datetime: ...
    def roll(self, date: datetime, modifier: Modifier, settlement: bool) -> datetime: ...
    def to_json(self) -> str: ...

class NamedCal:
    def __init__(self, name: str) -> None: ...
    def add_bus_days(self, date: datetime, days: int, settlement: bool) -> datetime: ...
    def add_days(
        self, date: datetime, days: int, modifier: Modifier, settlement: bool
    ) -> datetime: ...
    def add_months(
        self, date: datetime, months: int, modifier: Modifier, roll: RollDay, settlement: bool
    ) -> datetime: ...
    def bus_date_range(self, start: datetime, end: datetime) -> list[datetime]: ...
    def cal_date_range(self, start: datetime, end: datetime) -> list[datetime]: ...
    def is_bus_day(self, date: datetime) -> bool: ...
    def is_non_bus_day(self, date: datetime) -> bool: ...
    def is_settlement(self, date: datetime) -> bool: ...
    def lag(self, date: datetime, days: int, settlement: bool) -> datetime: ...
    def roll(self, date: datetime, modifier: Modifier, settlement: bool) -> datetime: ...
    def to_json(self) -> str: ...

class Ccy:
    def __init__(self, name: str) -> None: ...
    name: str = ...

class FXRate:
    def __init__(
        self, lhs: str, rhs: str, rate: DualTypes, settlement: datetime | None
    ) -> None: ...
    rate: DualTypes = ...
    ad: int = ...
    settlement: datetime = ...
    pair: str = ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: FXRate) -> bool: ...

class FXRates:
    def __init__(self, fx_rates: list[FXRate], base: Ccy | None) -> None: ...
    fx_rates: list[FXRate] = ...
    currencies: list[Ccy] = ...
    ad: int = ...
    base: Ccy = ...
    fx_vector: list[DualTypes] = ...
    fx_array: list[list[DualTypes]] = ...
    def get_ccy_index(self, currency: Ccy) -> int | None: ...
    def rate(self, lhs: Ccy, rhs: Ccy) -> DualTypes | None: ...
    def update(self, fx_rates: list[FXRate]) -> None: ...
    def set_ad_order(self, ad: ADOrder) -> None: ...
